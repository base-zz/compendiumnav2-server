name: Deploy to Raspberry Pi

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Add SSH Key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: |
          ${{ secrets.SSH_PRIVATE_KEY }}
    
    # Create .env file with all secrets explicitly listed
    - name: Create .env file
      env:
        NODE_ENV: ${{ secrets.NODE_ENV }}
        PORT: ${{ secrets.PORT }}
        INTERNAL_PORT: ${{ secrets.INTERNAL_PORT }}
        AUTH_PORT: ${{ secrets.AUTH_PORT }}
        FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        DEBUG: ${{ secrets.DEBUG }}
        REQUIRE_AUTH: ${{ secrets.REQUIRE_AUTH }}
        TOKEN_EXPIRY: ${{ secrets.TOKEN_EXPIRY }}
        VPS_WS_PORT: ${{ secrets.VPS_WS_PORT }}
        VPS_PATH: ${{ secrets.VPS_PATH }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
        DIRECT_WS_PORT: ${{ secrets.DIRECT_WS_PORT }}
        DIRECT_WS_HOST: ${{ secrets.DIRECT_WS_HOST }}
        SIGNALK_URL: ${{ secrets.SIGNALK_URL }}
        SIGNALK_TOKEN: ${{ secrets.SIGNALK_TOKEN }}
        SIGNALK_ADAPTER: ${{ secrets.SIGNALK_ADAPTER }}
        RECONNECT_DELAY: ${{ secrets.RECONNECT_DELAY }}
        MAX_RECONNECT_ATTEMPTS: ${{ secrets.MAX_RECONNECT_ATTEMPTS }}
        VPS_URL: ${{ secrets.VPS_URL }}
        VPS_PORT: ${{ secrets.VPS_PORT }}
        RELAY_ENV_PATH: ${{ secrets.RELAY_ENV_PATH }}
        CONNECTION_TIMEOUT: ${{ secrets.CONNECTION_TIMEOUT }}
        MAX_RETRIES: ${{ secrets.MAX_RETRIES }}
        MOCK_MODE: ${{ secrets.MOCK_MODE }}
        FALLBACK_TO_MOCK: ${{ secrets.FALLBACK_TO_MOCK }}
        TOKEN_SECRET: ${{ secrets.TOKEN_SECRET }}
        ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
        VITE_TOKEN_SECRET: ${{ secrets.VITE_TOKEN_SECRET }}
        DATABASE_PATH: ${{ secrets.DATABASE_PATH }}
      run: |
        # Create .env file from environment variables
        env | grep -v '^GITHUB' | grep -v '^PATH=' | grep -v '^_' | sort > .env
        
        # Show what's in the .env file (without sensitive values)
        echo "Created .env file with these variables:"
        cat .env | cut -d= -f1
        
    - name: Install mDNS tools
      run: |
        sudo apt-get update
        sudo apt-get install -y avahi-utils
        
    - name: Deploy
      run: |
        # Resolve mDNS hostname
        echo "Resolving compendium.local..."
        PI_IP=$(avahi-resolve-host-name compendium.local | awk '{print $2}')
        
        if [ -z "$PI_IP" ]; then
          echo "Failed to resolve compendium.local - using fallback IP"
          PI_IP="192.168.68.66"
        fi
        
        echo "Using IP: $PI_IP"
        
        # Add IP to known hosts
        ssh-keyscan -H $PI_IP >> ~/.ssh/known_hosts
        
        # Copy .env file
        scp -o StrictHostKeyChecking=no .env pi@$PI_IP:~/compendium/.env
        
        # Run deployment commands
        echo "Running deployment commands..."
        ssh -o StrictHostKeyChecking=no pi@$PI_IP "
          cd ~/compendium
          git pull
          npm install
          systemctl --user restart compendium
        "
