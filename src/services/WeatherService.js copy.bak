import ScheduledService from "./ScheduledService.js";
import { UNIT_PRESETS } from "../shared/unitPreferences.js";

export class WeatherService extends ScheduledService {
  /** @type {Function} */
  _handlePositionUpdate;

  /** @type {Function} */
  _scheduleNextUpdate;

  /** @type {Object} */
  stateService;

  /** @type {string} */
  baseUrl;

  /** @type {Promise|null} */
  _currentFetch;

  /** @type {NodeJS.Timeout|null} */
  _positionCheckInterval;

  /** @type {{latitude: number|null, longitude: number|null}} */
  position;

  /** @type {NodeJS.Timeout|null} */
  _updateTimeout;
  constructor() {
    super("weather", {
      interval: 3600000, // 1 hour
      immediate: false,
      runOnInit: false,
    });

    this.baseUrl = "https://api.open-meteo.com/v1/forecast";
    this._currentFetch = null;
    this._positionCheckInterval = null;
    this._updateTimeout = null;
    this._positionAvailable = false;

    // Initialize internal position tracking
    this._internalPosition = {
      latitude: null,
      longitude: null,
      timestamp: null,
      source: null,
    };

    // Set up a default position (can be overridden by state updates)
    this.position = {
      latitude: null,
      longitude: null,
    };

    // Initialize methods
    this._handlePositionUpdate =
      this._handlePositionUpdate?.bind?.(this) || (() => {});
    this._scheduleNextUpdate =
      this._scheduleNextUpdate?.bind?.(this) || (() => {});
    this._onPositionAvailable = this._onPositionAvailable.bind(this);

    // Add dependency on PositionService
    this.setServiceDependency("position-service");
    this.log("Added dependency on position-service");

    // Listen for position:update event to know when we can start
    this.on("position:update", async (position) => {
      this.log(`Position data available: ${JSON.stringify({
        lat: position?.latitude,
        lon: position?.longitude,
        source: position?.source,
        timestamp: position?.timestamp ? new Date(position.timestamp).toISOString() : 'none'
      })}`);
      
      if (!this.isRunning) {
        this.log("Starting scheduled tasks for the first time");
        this.start();
      }
      
      // Run immediately when position is available
      try {
        this.log("Running initial weather data fetch");
        await this.runNow();
        this.log("Initial weather data fetch completed successfully");
      } catch (err) {
        this.logError("Initial weather data fetch failed:", err);
      }
    });

    // Set up position:update listener when dependencies are resolved
    this.on("dependencies:resolved", () => {
      this.log("Dependencies resolved, checking for PositionService");
      const positionService = this.dependencies["position-service"];
      if (!positionService) {
        this.logError("PositionService dependency not available, weather data may not update");
        return;
      }

      this.log("PositionService dependency found, setting up position listener:", {
        type: positionService.constructor?.name || 'Unknown',
        id: positionService.serviceId || 'unknown',
      });

      // Set up position:update listener
      const onPositionAvailable = (position) => {
        this.log("Received position:update event from PositionService:", {
          lat: position?.latitude,
          lon: position?.longitude,
          source: position?.source
        });

        // Update internal position
        this._onPositionAvailable({
          latitude: position.latitude,
          longitude: position.longitude,
          timestamp: position.timestamp || new Date().toISOString(),
          source: position.source || 'unknown'
        });
      };

      // Remove any existing listeners to prevent duplicates
      positionService.removeListener("position:update", onPositionAvailable);
      positionService.on("position:update", onPositionAvailable);
      
      this.log("Position available listener has been set up");

      // Check if we already have position data
      if (positionService._primarySource && positionService._positions?.[positionService._primarySource]) {
        const position = positionService._positions[positionService._primarySource];
        this.log("Initial position data already available, processing...");
        onPositionAvailable({
          ...position,
          source: positionService._primarySource,
        });
      } else {
        this.log("No initial position data available yet, waiting for position:update event...");
      }
    });
  }

  /**
   * Handle position:update event from state service
   * @private
   * @param {Object} positionData - Position data from event
   */
  _onPositionAvailable(positionData) {
    this.log(
      "POSITION EVENT RECEIVED in WeatherService from position-service:",
      {
        hasData: !!positionData,
        latitude: positionData?.latitude,
        longitude: positionData?.longitude,
        timestamp: positionData?.timestamp,
        source: positionData?.source || "unknown",
        isPrimary: positionData?.isPrimary || false,
      }
    );

    if (!positionData || !positionData.latitude || !positionData.longitude) {
      this.logError("[WeatherService] Received invalid position data");
      return;
    }

    // Update internal position data
    this._internalPosition = {
      latitude: positionData.latitude,
      longitude: positionData.longitude,
      timestamp: positionData.timestamp,
      source: positionData.source || "position-service",
    };

    this._positionAvailable = true;

    this.log("Updated internal position from position event:", {
      latitude: this._internalPosition.latitude,
      longitude: this._internalPosition.longitude,
      timestamp: this._internalPosition.timestamp,
      source: this._internalPosition.source,
    });

    // Trigger an immediate weather fetch when we get a position update
    this.log("Position update received, triggering immediate weather fetch");
    this.run().catch((err) =>
      this.logError(
        `Error fetching weather after position update: ${err.message}`
      )
    );

    // Update legacy position property
    this.position = {
      latitude: positionData.latitude,
      longitude: positionData.longitude,
    };

    // Update internal position tracking
    this._internalPosition = {
      latitude: positionData.latitude,
      longitude: positionData.longitude,
      timestamp: positionData.timestamp,
      source: "position:update event",
    };

    this._positionAvailable = true;

    this.log(
      `Position updated successfully: lat=${positionData.latitude}, lon=${positionData.longitude}`
    );
    this.log(
      `Updated internal position from event: lat=${positionData.latitude}, lon=${positionData.longitude}`
    );

    // Position updated, will use in next scheduled run
    this.log("Position updated, will be used in next scheduled run");
    // No immediate fetch triggered
  }

  /**
   * Wait for state service to be ready
   * @private
   * @param {number} timeout - Timeout in ms
   */
  async _waitForStateServiceReady(timeout = 10000) {
    if (this.stateService.isReady) return;
    return new Promise((resolve, reject) => {
      const timer = setTimeout(
        () =>
          reject(new Error("Timeout waiting for state service to be ready")),
        timeout
      );
      this.stateService.once &&
        this.stateService.once("ready", () => {
          clearTimeout(timer);
          resolve();
        });
    });
  }

  /**
   * Check if the state has valid position data and update internal position if it does
   * @private
   * @returns {boolean} - Whether valid position data was found
   */
  _hasValidPositionData() {
    try {
      this.log("Checking for valid position data...");

      // Get position from PositionService instead of state service
      const positionService = this.dependencies["position-service"];
      if (!positionService) {
        this.log("PositionService dependency not available");
        return false;
      }

      if (!positionService._primarySource) {
        this.log("PositionService has no primary source set");
        return false;
      }

      this.log(
        `PositionService primary source: ${positionService._primarySource}`
      );

      const primaryPosition =
        positionService._positions[positionService._primarySource];

      if (!primaryPosition) {
        this.log(
          `No position data found for primary source: ${positionService._primarySource}`
        );
        return false;
      }

      this.log("Primary position data:", {
        latitude: primaryPosition.latitude,
        longitude: primaryPosition.longitude,
        timestamp: primaryPosition.timestamp,
        type: typeof primaryPosition.latitude,
      });

      if (
        typeof primaryPosition.latitude !== "number" ||
        typeof primaryPosition.longitude !== "number"
      ) {
        this.log("Position data has invalid latitude or longitude types");
        return false;
      }

      const lat = primaryPosition.latitude;
      const lon = primaryPosition.longitude;

      const isValid =
        !isNaN(lat) &&
        !isNaN(lon) &&
        lat >= -90 &&
        lat <= 90 &&
        lon >= -180 &&
        lon <= 180;

      if (isValid) {
        // Update internal position from PositionService data
        this._internalPosition = {
          latitude: lat,
          longitude: lon,
          timestamp: primaryPosition.timestamp,
          source: positionService._primarySource,
        };

        // Also update legacy position property for backward compatibility
        this.position = { latitude: lat, longitude: lon };
        this._positionAvailable = true;

        this.log(
          `Updated internal position from state: lat=${lat}, lon=${lon}`
        );
      }

      return isValid;
    } catch (error) {
      this.logError("Error checking position data:", error.message);
      return false;
    }
  }

  /**
   * Wait for position data to become available
   * @private
   * @param {number} [timeoutMs=60000] - Timeout in milliseconds
   * @returns {Promise<{latitude: number, longitude: number}>}
   */
  _waitForPosition(timeoutMs = 60000) {
    return new Promise((resolve, reject) => {
      let timeout;
      const handler = (position) => {
        clearTimeout(timeout);
        this.dependencies["position-service"].removeListener(
          "position:update",
          handler
        );
        resolve(position);
      };
      timeout = setTimeout(() => {
        this.dependencies["position-service"].removeListener(
          "position:update",
          handler
        );
        reject(new Error("Timed out waiting for position"));
      }, timeoutMs);
      this.dependencies["position-service"].once("position:update", handler);
    });
  }

  async _initializePositionService() {
    // Check if position service is available
    const positionService = this.dependencies["position-service"];
    if (!positionService) {
      this.log(
        "PositionService not available, weather data may not update",
        "warn"
      );
      return;
    }

    this.log("PositionService is ready");
  }

  async run() {
    this.log('WeatherService.run() called');
    const runId = Date.now();
    this.log(
      `=== WeatherService.run(${runId}) STARTED at ${new Date().toISOString()} ===`
    );

    if (this._currentFetch) {
      this.log(`[${runId}] Fetch already in progress, skipping.`);
      return;
    }

    const positionService = this.dependencies["position-service"];
    if (!positionService) {
      this.logError(`[${runId}] PositionService not available.`);
      return;
    }

    let position;
    // Try to get the latest valid position
    if (
      positionService._primarySource &&
      positionService._positions &&
      positionService._positions[positionService._primarySource]
    ) {
      position = positionService._positions[positionService._primarySource];
      this.log(
        `[${runId}] Found existing position: ${position.latitude}, ${position.longitude}`
      );
    } else {
      this.log(`[${runId}] Waiting for position:update event...`);
      try {
        position = await this._waitForPosition(60000); // 60s timeout
        this.log(
          `[${runId}] Got position: ${position.latitude}, ${position.longitude}`
        );
      } catch (err) {
        this.logError(`[${runId}] Failed to get position: ${err.message}`);
        this.emit("weather:error", { error: "No position data available" });
        return;
      }
    }

    // Now fetch weather data
    try {
      this._currentFetch = this.fetchWeatherData(
        position.latitude,
        position.longitude
      );
      const weatherData = await this._currentFetch;
      this.emit("weather:update", weatherData);
      this.log(`[${runId}] Weather data fetched and emitted.`);
    } catch (err) {
      this.logError(`[${runId}] Weather fetch failed: ${err.message}`);
      this.emit("weather:error", { error: err.message });
    } finally {
      this._currentFetch = null;
    }
  }

  // async run() {
  //   const runId = Date.now();
  //   this.log(
  //     `=== WeatherService.run(${runId}) STARTED at ${new Date().toISOString()} ===`
  //   );
  //   this.log(
  //     `[${runId}] WeatherService run method called - checking dependencies and position data`
  //   );

  //   // Check if we already have a fetch in progress
  //   if (this._currentFetch) {
  //     this.log(
  //       `[${runId}] Weather fetch already in progress, skipping this run`
  //     );
  //     return { success: false, error: "Fetch already in progress" };
  //   }

  //   this.log(
  //     `[${runId}] No fetch in progress, proceeding with weather data fetch`
  //   );

  //   // Check if PositionService is available
  //   this.log(`[${runId}] Checking PositionService dependency...`);
  //   const positionService = this.dependencies["position-service"];
  //   if (!positionService) {
  //     this.logError(
  //       `[${runId}] PositionService not available, cannot fetch weather data`
  //     );
  //     this.emit("weather:error", { error: "PositionService not available" });
  //     return { success: false, error: "PositionService not available" };
  //   }

  //   this.log(
  //     `[${runId}] PositionService found: ${positionService.constructor.name}`
  //   );

  //   // Debug PositionService state
  //   this.log(`[${runId}] PositionService state:`, {
  //     primarySource: positionService._primarySource,
  //     hasPositions: !!positionService._positions,
  //     positionCount: positionService._positions
  //       ? Object.keys(positionService._positions).length
  //       : 0,
  //     hasPrimaryPosition:
  //       positionService._primarySource &&
  //       positionService._positions &&
  //       !!positionService._positions[positionService._primarySource],
  //   });

  //   // Ensure we're listening for position events
  //   this.log(`[${runId}] Ensuring position:update event listener is set up`);
  //   positionService.removeListener(
  //     "position:update",
  //     this._onPositionAvailable
  //   );
  //   positionService.on("position:update", this._onPositionAvailable);

  //   // Check if we can directly get position data from PositionService
  //   if (
  //     positionService._primarySource &&
  //     positionService._positions &&
  //     positionService._positions[positionService._primarySource]
  //   ) {
  //     const primaryPos =
  //       positionService._positions[positionService._primarySource];
  //     this.log(
  //       `[${runId}] Found existing position data in PositionService: ${primaryPos.latitude}, ${primaryPos.longitude}`
  //     );

  //     // Update internal position with this data
  //     this._internalPosition = {
  //       latitude: primaryPos.latitude,
  //       longitude: primaryPos.longitude,
  //       timestamp: primaryPos.timestamp || new Date().toISOString(),
  //       source: positionService._primarySource,
  //     };
  //     this._positionAvailable = true;
  //     this.log(
  //       `[${runId}] Updated internal position with existing data from PositionService:`,
  //       this._internalPosition
  //     );
  //   } else {
  //     this.log(`[${runId}] No existing position data found in PositionService`);
  //   }

  //   // Log current state including internal position
  //   this.log(`[${runId}] WeatherService state:`, {
  //     hasPosition: this._positionAvailable,
  //     internalPosition: this._internalPosition,
  //     hasPositionService: !!positionService,
  //     primarySource: positionService._primarySource || "none",
  //   });

  //   // Check if we have internal position data
  //   if (
  //     !this._internalPosition?.latitude ||
  //     !this._internalPosition?.longitude
  //   ) {
  //     this.log(`[${runId}] Internal position check: NOT AVAILABLE`);

  //     // Try to get position from PositionService
  //     if (this._hasValidPositionData()) {
  //       this.log(`[${runId}] Found valid position from PositionService`);
  //       // _hasValidPositionData already updated internal position if valid
  //     } else {
  //       this.log(
  //         `[${runId}] No valid position from PositionService, waiting for position...`
  //       );

  //       try {
  //         // Wait for position data with timeout
  //         this.log(
  //           `[${runId}] Waiting for position data with 60 second timeout...`
  //         );
  //         const position = await this._waitForPosition(60000); // 60 second timeout
  //         this.log(
  //           `[${runId}] Got position data: ${position.latitude}, ${position.longitude}`
  //         );

  //         // Update internal position
  //         this._internalPosition = {
  //           latitude: position.latitude,
  //           longitude: position.longitude,
  //           timestamp: new Date().toISOString(),
  //           source: "waitForPosition",
  //         };

  //         // Also update legacy position property
  //         this.position = position;
  //         this._positionAvailable = true;
  //       } catch (error) {
  //         this.logError(
  //           `[${runId}] Failed to get position data:`,
  //           error.message
  //         );
  //         this.emit("weather:error", { error: "No position data available" });
  //         return { success: false, error: "No position data available" };
  //       }
  //     }
  //   } else {
  //     this.log(
  //       `[${runId}] Using existing internal position: lat=${this._internalPosition.latitude}, lon=${this._internalPosition.longitude}, source=${this._internalPosition.source}`
  //     );
  //   }

  //   try {
  //     this.log(`[${runId}] Starting weather fetch process...`);

  //     // Create a promise that resolves when the current fetch completes
  //     this._currentFetch = (async () => {
  //       try {
  //         // Use internal position data for weather fetch
  //         const position = {
  //           latitude: this._internalPosition.latitude,
  //           longitude: this._internalPosition.longitude,
  //         };

  //         this.log(
  //           `[${runId}] Using position for weather fetch: ${position.latitude}, ${position.longitude}`
  //         );
  //         this.log(`[${runId}] Starting weather data fetch...`);

  //         // Fetch weather data with the position
  //         this.log(`[${runId}] Fetching weather data...`);
  //         const weatherData = await this.fetchWeatherData(
  //           position.latitude,
  //           position.longitude
  //         );
  //         this.log(
  //           `[${runId}] Weather data fetch and event emission completed successfully`
  //         );

  //         // Emit the weather update event
  //         this.log(
  //           `[${runId}] EMITTING weather:update EVENT with data structure:`,
  //           {
  //             dataType: typeof weatherData,
  //             hasCurrentData: !!weatherData.current,
  //             hasHourlyData: !!weatherData.hourly,
  //             hasDailyData: !!weatherData.daily,
  //             timestamp: new Date().toISOString(),
  //           }
  //         );

  //         this.emit("weather:update", weatherData);
  //         this.log("Weather:update event emitted successfully");

  //         return weatherData;
  //       } finally {
  //         this._currentFetch = null;
  //       }
  //     })();

  //     return await this._currentFetch;
  //   } catch (error) {
  //     this.logError(`[${runId}] Error in run:`, error);
  //     this.emit("weather:error", { error: error.message });
  //     throw error;
  //   }
  // }

  /**
   * Get the current unit preferences from state or use defaults
   * @private
   */
  async _getUnitPreferences() {
    try {
      // Try to get preferences from state
      const state = this.stateService?.getState();
      if (state?.preferences?.units) {
        return state.preferences.units;
      }
      // Fall back to imperial defaults if no preferences found
      return UNIT_PRESETS.IMPERIAL;
    } catch (error) {
      this.log(
        "Could not get unit preferences, using defaults:",
        error.message
      );
      return UNIT_PRESETS.IMPERIAL;
    }
  }

  /**
   * Fetch weather data with retry logic
   * @private
   */
  async fetchWeatherData(latitude, longitude, retries = 2) {
    let lastError;

    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const result = await this._fetchWeatherData(latitude, longitude);
        if (attempt > 1) {
          this.log(
            `Successfully fetched weather data after ${attempt} attempts`
          );
        }
        return result;
      } catch (error) {
        lastError = error;
        const waitTime = 1000 * Math.pow(2, attempt - 1); // Exponential backoff
        this.log(
          `Attempt ${attempt} failed, retrying in ${waitTime}ms:`,
          error.message
        );

        if (attempt < retries) {
          await new Promise((resolve) => setTimeout(resolve, waitTime));
        }
      }
    }

    this.logError(`All ${retries} attempts failed`);
    throw lastError;
  }

  /**
   * Internal method to perform the actual weather data fetch
   * @private
   */
  async _fetchWeatherData(latitude, longitude) {
    try {
      this.log(
        `_fetchWeatherData called with latitude=${latitude}, longitude=${longitude}`
      );

      // Get user's unit preferences
      this.log("Getting unit preferences...");
      const unitPrefs = await this._getUnitPreferences();
      const isMetric = unitPrefs?.temperature === "°C";
      this.log(`Unit preferences retrieved, isMetric=${isMetric}`);

      const params = new URLSearchParams({
        latitude: latitude,
        longitude: longitude,
        // Current weather conditions
        current: [
          "temperature_2m",
          "relative_humidity_2m",
          "apparent_temperature",
          "is_day",
          "precipitation",
          "rain",
          "showers",
          "weather_code",
          "cloud_cover",
          "pressure_msl",
          "surface_pressure",
          "wind_speed_10m",
          "wind_direction_10m",
          "wind_gusts_10m",
        ].join(","),
        // Hourly forecast
        hourly: [
          "temperature_2m",
          "relative_humidity_2m",
          "dew_point_2m",
          "apparent_temperature",
          "precipitation_probability",
          "precipitation",
          "rain",
          "showers",
          "snowfall",
          "snow_depth",
          "cloud_cover",
          "cloud_cover_low",
          "cloud_cover_mid",
          "cloud_cover_high",
          "wind_speed_10m",
          "wind_direction_10m",
          "wind_gusts_10m",
        ].join(","),
        // Daily forecast
        daily: [
          "weather_code",
          "temperature_2m_max",
          "temperature_2m_min",
          "sunrise",
          "sunset",
          "daylight_duration",
          "sunshine_duration",
          "uv_index_max",
          "uv_index_clear_sky_max",
          "rain_sum",
          "snowfall_sum",
          "precipitation_sum",
          "precipitation_hours",
          "precipitation_probability_max",
          "wind_speed_10m_max",
          "wind_direction_10m_dominant",
          "wind_gusts_10m_max",
        ].join(","),
        // Set units based on preferences
        temperature_unit: isMetric ? "celsius" : "fahrenheit",
        wind_speed_unit: "kn", // Always use knots for marine applications
        precipitation_unit: isMetric ? "mm" : "inch",
        timezone: "auto",
        timeformat: "iso8601",
      });

      // Build the URL with all parameters
      const url = `${this.baseUrl}?${params.toString()}`;
      this.log(`Fetching weather data from URL: ${url}`);

      // Fetch the data
      this.log("Starting fetch request...");
      const response = await fetch(url);
      this.log(`Fetch response received with status: ${response.status}`);

      if (!response.ok) {
        this.logError(
          `Weather API error: ${response.status}: ${response.statusText}`
        );
        throw new Error(
          `Weather API returned ${response.status}: ${response.statusText}`
        );
      }

      this.log("Fetch successful, parsing JSON response...");

      // Parse the JSON response
      const data = await response.json();
      this.log("JSON response parsed successfully");

      // Validate the response
      if (!data || !data.current) {
        this.logError("Invalid weather data received", data);
        throw new Error("Invalid weather data received");
      }

      this.log("Weather data validation successful");

      // Create the raw forecast data
      const forecastData = {
        current: data.current,
        hourly: data.hourly,
        daily: data.daily,
        metadata: {
          latitude: data.latitude,
          longitude: data.longitude,
          timezone: data.timezone,
          lastUpdated: new Date().toISOString(),
        },
      };

      // Log the data we're about to store
      this.log(
        "Prepared forecast data with keys:",
        Object.keys(forecastData).join(", ")
      );

      try {
        // Update the state with the new forecast data
        // await this.stateService.updateState({
        //   forecast: forecastData,
        // });

        this.log("EMITTING weather:update EVENT with data structure:", {
          dataType: typeof forecastData,
          hasCurrentData: !!forecastData.current,
          hasHourlyData: !!forecastData.hourly,
          hasDailyData: !!forecastData.daily,
          timestamp: forecastData.timestamp,
        });

        this.log(
          "EMITTING weather:update EVENT from fetchWeatherData with data structure:",
          {
            dataType: typeof forecastData,
            hasCurrentData: !!forecastData.current,
            hasHourlyData: !!forecastData.hourly,
            hasDailyData: !!forecastData.daily,
            timestamp: new Date().toISOString(),
          }
        );

        this.emit("weather:update", forecastData);
        this.log(
          "Weather:update event emitted successfully from fetchWeatherData"
        );

        this.log("Successfully emitted weather:update event");
      } catch (error) {
        this.logError("Error updating state:", error);
        throw error;
      }

      return forecastData;
    } catch (error) {
      this.logError("Error fetching weather data:", error);
      this.emit("error", error);
      throw error;
    }
  }
}
